def print_board(board):
    print("   |   |   ")
    print(" {} | {} | {} ".format(board[1], board[2], board[3]))
    print("___|___|___")
    print("   |   |   ")
    print(" {} | {} | {} ".format(board[4], board[5], board[6]))
    print("___|___|___")
    print("   |   |   ")
    print(" {} | {} | {} ".format(board[7], board[8], board[9]))
    print("   |   |   ")
#remember to change the values of lines 3 to 30 to -1
def check_win(board):
    win_combinations = ((1, 2, 3), (4, 5, 6), (7, 8, 9),
                        (1, 4, 7), (2, 5, 8), (3, 6, 9),
                        (1, 5, 9), (3, 5, 7))
    for combo in win_combinations:
        if board[combo[1]] == board[combo[2]] == board[combo[3]] != ' ':
            return board[combo[1]]
    return None

def check_tie(board):
    return ' ' not in board

def get_move(player, board):
    valid_move = False
    while not valid_move:
        move = input("Player {}, enter a valid move (0-8): ".format(player))
        if not move.isdigit():
            print("Invalid move. Please enter a number.")
        elif int(move) < 1 or int(move) > 9:
            print("Invalid move. Please enter a number between 1 and 9.")
        elif board[int(move)] != ' ':
            print("Invalid move. That spot is already taken.")
        else:
            valid_move = True
            return int(move)

def play_game():
    board = [' '] * 9
    player = 1
    while True:
        print_board(board)
        move = get_move(player, board)
        board[move] = 'X' if player == 1 else 'O'
        winner = check_win(board)
        if winner is not None:
            print_board(board)
            print("Player {} wins!".format(player))
            return
        if check_tie(board):
            print_board(board)
            print("Tie game!")
            return
        player = 2 if player == 1 else 1

play_game()